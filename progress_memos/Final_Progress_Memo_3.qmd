---
title: "Progress Memo 3"
subtitle: |
  | Final Project 
  | Data Science 1 with R (STAT 301-1)
author: "Jeremy Ferguson"
date: today

format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    
execute:
  echo: false
  warning: false

from: markdown+emoji 
---

::: {.callout-tip icon="false"}
## Github Repo Link

<https://github.com/stat301-1-2023-fall/final-project-1-jeremyferg.git>
:::

## Introduction

This analysis provides a foundation for understanding how various decisions and actions associated with the video game industry affect the financial stocks of this industry's publishers. The video game industry is interesting when exploring finances because the success of a game publisher relies heavily on the financial impact of one-time events. For example, a video game company may spend years developing the next iteration of a game franchise instead of rapidly publishing new games. Their goal in the more systematic approach is to produce a product that will sustain the company until the next project is publicly released. From the unique structure of this industry, one may be interested in understanding how these events heavily impact the industry's stocks. In theory, a one-time event of this magnitude should substantially influence the activity of stock exchanges and the value of the company's stock. Likewise, understanding the components of this data is essential to a curious researcher.

To my knowledge, there is no public data set that captures video game companies as they relate to their financial stocks. So, to contribute to potential research in this industry, my project seeks to create a relational database with video game industry-related data. I collected data through a combination of web scraping and pre-cleaned data sets. General game information was collected through game overview pages on [Wikipedia](https://en.wikipedia.org/wiki/Category:Video_games_by_year), The Game Awards results were scraped from results pages on [Wikipedia](https://en.wikipedia.org/wiki/The_Game_Awards), and game reviews were taken from [OpenCritic](https://opencritic.com/) (a database of game reviews in a similar style to other websites like IMDB). The remainder of the report will consist of an overview of the web scraping process, a discussion of the final scraped data set, and a brief exploratory data analysis highlighting data-related questions that a researcher or industry leader would investigate further.

## Web scraping Overview

This section expands on the process and challenges faced when web scraping data. First, I highlight game information web scraping, followed by The Game Awards and game reviews scraping. These files are found under the `webscraping_scripts` folder of my GitHub repository.

### Game Information

There are few public data sets with general information about games, but all lack updated data. Therefore, I decided to scrape data through the [Wikipedia pages of video games](https://en.wikipedia.org/wiki/Category:Video_games_by_year). Wikipedia has pages dedicated to listing the names of video games released per year. Each game listed on this page is linked to another Wikipedia page specifically for that game. Assuming that every video game listed on Wikipedia had a unique information table, I started my web scraping by extracting information about games through Wikipedia's infoboxes. Using [Mario Party Superstars](https://en.wikipedia.org/wiki/Mario_Party_Superstars) as a game example, we can see that the general overview infobox of the game has game information categories such as publishers, release dates, and genres. Starting with 2013 videogames, the functions in `videogame_info_wenscraping` extract the necessary information from each game's page, binding games together onto one data frame.

The main challenge of web scraping game information is the consistency of infoboxes across each game. Specifically, there were two main issues that many infoboxes had: missing data and irregular data. Missing data refers to completely missing categories from infoboxes. A common example of missing data was the series category. If a game was not associated with a game series, the row `series` was not in the infobox table. A simple solution to this concern is setting `series` equal to NA if the variable is not in the infobox.

Irregular data entails that, while the data is not missing from the infobox, the category is formatted in a way that makes web scraping directly from the table difficult. For example, most infoboxes used text to record a game's publisher. However, many games used hyperlinks to record a publisher on the infobox, such as [Elden Ring](https://en.wikipedia.org/wiki/Elden_Ring). Using a regular `rvest` function such as `html_table()` did not accurately parse out the required information for web scraping.

### The Game Awards

[The Game Awards](https://thegameawards.com/) is the video game industry's most notable awards event. This is an event where publishers earn awards on recent releases, showcase trailers for future releases, and present lifetime awards to members of the industry. Given the popularity of the event, we may predict that winning or being nominated for an award casually affects the stock of that associated publisher. Similar to game information, there does not appear to be a public, up-to-date data set regarding the yearly results of The Game Awards. Therefore, I scraped result information from the [Wikipedia pages of yearly Game Awards results](https://en.wikipedia.org/wiki/The_Game_Awards). Each page, [like the 2016 page](https://en.wikipedia.org/wiki/The_Game_Awards_2016), has a Wikipedia info-table listing the name of an award category and the results of that category.

The main challenge of web scraping these awards is the initial formatting of the results tables. Referring back to the 2016 awards, there are no specified column names for simplistic table extracting, and, when initially scraped, all nominees are stringed together onto one value.

### Game Reviews

Like a traditional journalist or political activist, a video game reviewer has the potential to influence the trajectory of a game company's work. A leader in the video game industry may be interested in a statistical summary of review scores and the financial effects these ratings have on their company. So, game reviews are web-scraped for this analysis. [OpenCritic](https://opencritic.com/), a database for video game reviews, is used to extract game reviews from all available games from 2013 to 2023. Each game, such as [Persona 5 Royal](https://opencritic.com/game/8785/persona-5-royal/reviews), has a list of reviewers, the company they write for, and their rating of the game. Given this information is stored in rows, we can loop an extraction of each reviewer's information for each video game.

The main concern for this web scraping is data accuracy. For example, there are reviewers on Persona 5 Royal's OpenCritic website who rated the games out of five stars. In a review row, five stars are presented as five literal images of stars. While a reader can understand the rating of these games, I am not aware of a current web scraping tool that would effectively translate these images to a numeric form. Therefore, reviews with images in their scores were dropped during the web scraping process. With this action in mind, a researcher may be concerned that removing a specific group from the data set may cause biased results from a theoretical game review variable. Therefore, a researcher should verify the randomness of this data for further studies.

## Data Overview and Quality

Due to the large amount of data sets I collected for this project, I decided to structure these data sets through a relational database design. A visual representation of this design is located under the `games_database` folder within the `data` folder. This method of structuralization provides a simple yet efficient format for connecting datasets with others. This section will expand on this design alongside providing an overview of each dataset within the design.

### Relational Database Design Structure

### Relating to General Video Game Information

#### `games`

The `games` data set uniquely identifies the name of each game originally found in the raw version of `game_info`. The variable `games` has a type character and `game_id` has a type integer. `game_id` is the primary key. There are (4046) unique games in this data set.

To avoid redundancy, the next five data sets (until and including `publishers`) will have the same origin: `game_info`, the same character-integer variable types, and an id for a primary key.

#### `game_series` 

`game_series` has 665 unique observations. This data set was generally clean when extracting its information.

#### `game_genres`
`
`game_genres` has 190  unique observations. There are many instances within `game_genres` where two genres could reasonably be associated with one. The `game_genres` section of my R script shows that I started this process manually. While I believe these genres have been simplified enough for sufficient analysis as it relates to this project, further research should reduce the number of unique observations.

#### `game_modes`

`game_modes` has 24 unique observations. Again, the same situation as with `game_modes` occurs in which observations could  be merged. However, this data set has much fewer observations than `game_genre`, making manual simplification more plausible.

#### `publishers`

`publishers` has 1691 unique observations. The same issues found in the last two variables apply here. In addition, many `publishers` observations are subsidiaries to the parent  company the analysis is interested in. For example, 2K, the group known for the NBA 2K series, is a subsidiary of Take-Two. In this analysis, we want to associate 2K only with Take-Two. To help with the accuracy of the analysis, I replaced the subsidiaries of influential publishers with their parent company. 

#### `game_info`

`game_info` combines the `game_id`, `series_id`, `genres_id`, `modes_id`, and `publisher_id` to create one compound primary key. `game_info` has a one-to-many relationship with each of these parent data sets. release_date ( a date type) is also included in this dataset. This variable indicates the first official day of release for a video game. In total, the data set has 9419 unique observations.

### Relating to The Game Awards

#### `award_category`

The `award_category` data set uniquely identifies the name of each category from The Game Awards. To condense the number of observable categories, some awards (like "Best Student Game") were dropped from the data because these categories did not relate to a video game publisher. Other categories (like  "Best Online Experience") were merged to other values for simplicity. The variable `category` has type character, and `category_id` has type int. `game_id` is the primary key of this data set. There are 24 unique categories in this data set.

#### `game_awards`

The `game_awards` data set provides information about the nominations and results for each game at The Game Awards from 2013 to 2022. The data set has 826 unique observations. Having a type date, the variable `date` uniquely observations the day of The Game Awards for a given year. `game_id`, `category_id`, and `publisher_id` are brought into the data set as foreign keys. `award_category` has a one-to-many relationship with `game_awards`. `games` and `publishers` logically has a zero-or-one-to-many relationship with `game_awards`. Having a type logical, the `winner` variable is set to TRUE if a given game won the award category. The combination of `date`, `game_id`, and `category_id`, is the compound primary key of this data set.

### Relating to Game Reviews

#### `game_review_companies`

The `game_review_companies` data set uniquely identifies the name of the video game review company from OpenCritic reviews. The variable `review_company` has type chr and `review_company_id` has type int. `review_company_id` is the primary key. There are 494 unique companies in this data set.

#### `game_reviewers`

The `game_reviewers` data set uniquely identifies the names of the reviewers from OpenCritic reviews. The variable `reviewer` has type character, and `reviewer_id` has type integer. `reviewer_id` is the primary key. `game_reviewers` merges with `game_review_companies` through a one-to-many relationship. There are 9386 unique reviewers in this data set.

#### `game_reviews`

The `game_reviews` data set has a record of each review of a game on OpenCritic from 2013 to 2023. The data set has 62,662 unique observations. Having a type date, the variable `date` records the day the given review was published. `game_id` and `reviewer_id` are brought into the data set as foreign keys. `game_reviewers` has a one-to-many relationship with `game_reviews`. `games` has a zero-or-one-to-many relationship with `game_reviews`. Having a type double, the `rating` variable is the score a reviewer gives a game out of 100. The `rating_yesterday` variable (type double)finds the average score of a game on the previous date of a given review observation. If there were no reviews before the date of a given review, `rating_yesterday` is set to NA.

### Esports Data Set

The `esports` data set records information about esports tournaments each month given some game. This data set was created by [RAN.KIRSH on Kaggle](https://www.kaggle.com/datasets/rankirsh/esports-earnings/data) The `esports` data set records information about esports tournaments each month given some game. This data set was created by [RAN.KIRSH on Kaggle](https://www.kaggle.com/datasets/rankirsh/esports-earnings/data). When filtering for the 10-year period, the data set has 2718 unique observations. Having a type date, the variable `date` records the month of the esports observation. `game_id` is brought into the data set a foreign key. `games` has a zero-or-one-to-many relationship with `esports`. `earnings` records the monthly accumulative earnings from esports competitions given a game. `players` (type dbl) records the number of competitors participating in an esports-related event for a given game. `tournaments` (type dbl) records the number of tournaments held in a given month/year for a game. The combination of `date` and `game_id` is the compound primary key of this data set.

### Publisher Stocks Data Set
The `publisher_stocks` data set records stock data from [Yahoo! Finance](https://finance.yahoo.com/) about the nine publishing companies specified for this analysis. These publishers include Nintendo, Electronic Arts, Sega, Capcom, Konami, Ubisoft, Square Enix, Take-Two, and Bandai Namco. These publishers can be varied by a researcher.However, my background knowledge of these publishers' success facilitated the decision to use them for this analysis. I refer to this group of publishers as the "top publishers" moving forward^[Activision Blizzard is also part of the top publishers. Recently, this company was bought by Microsoft. So, while their stocks on Yahoo! Finance no longer exist, the company is relevant to this historical data] The data set has 20,659 unique observations. Having a type date, the variable `date` has 20 unique observations that record the date of the stock’s records. `publisher_id` is brought into the data set as foreign keys. `publishers` has a zero-or-one-to-many relationship with `publisher_stocks`. The remaining variables, all of type dbl, simply summarize the fluctuations of the stock on a given day. Worth noting is `volume`, which records the number of shares traded in a stock. Also, `adjusted` records the closing stock value after adjustments for all applicable splits and dividend distributions. The combination of `date` and `publisher_id` is the compound primary key of this data set.

## Explorations

Given the amount of time placed into collecting data, only a brief exploration of the dataset is conducted. This exploration is structured to highlight the information within each of the major data sets (`game_info`, `game_awards`, `esports`, and `game_reviews`), relating these observations to `publisher_stocks` when appropriate.


```{r}
#| label: packages

###########################
### NECESSARY LIBRARIES ###
###########################

library(tidyverse)

##########################
### LOADING IN DB DATA ###
##########################

game_awards <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_awards.csv')

award_category <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/award_category.csv')

esports <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/esports.csv')

game_info <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_info.csv')

games <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/games.csv')

game_genres <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_genres.csv')

game_modes <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_modes.csv')

game_series <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_series.csv')

publishers <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/publishers.csv')

publisher_stocks <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/publisher_stocks.csv')

game_reviews <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_reviews.csv')

game_review_companies <- read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_review_companies.csv')

game_reviewers <- 
  read_csv('C:/stat-301-1/final-project-1-jeremyferg/data/games_database/game_reviewers.csv')


###list of publishers that will be key for analysis
top_publishers <- c('nintendo', 'electronic arts', 'activision blizzard',
                    'square enix', 'sega', 'konami', 'ubisoft', 'take-two',
                    'bandai namco', 'capcom')

```

### EDA - Video Game Information 

We start our analysis by characterizing the information in `game_info` as it relates to the top publishers. First, we can examine the distribution of games by each of these top publishers. @fig-games-by-publisher indicates that Nintendo is credited with publishing the most games over these ten years, followed by Bandai Namco and Square Enix. Nintendo’s dominance in publishing should not be unexpected by researchers. Of the ten publishers listed, Nintendo is the only company that also produces its game consoles such as the Nintendo Switch. Since the company also produces a console, we should expect Nintendo to be the primary supplier of games for this console through their various top-selling game series such as Super Mario and The Legend of Zelda. 

```{r}
#| label: fig-games-by-publisher
#| fig-cap: Distribution of games by top-publishers

################################################################################

#############################
### GAME INFO EDA  BEGINS ###
#############################

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  distinct(pick(publisher_id, game_id), .keep_all = TRUE) |> 
  mutate(publishers = factor(publishers)|> fct_infreq() |> fct_rev()) |> 
  summarise(n = n(), .by = publishers) |> 
  ggplot(aes(publishers, n)) +
  geom_bar(fill = 'blue4', stat = 'identity') +
  coord_flip() +
  geom_text(aes(label = signif(n)), nudge_y = 10) +
  labs(y = 'Number of Games',
       x = 'Publishers',
       caption = 'Source: Wikipedia')

```

```{r}
#| label: get_game_info_distr

get_game_info_distr <- function(some_var = game_series, var_id = series_id, 
                                var_title = series, nudge = 80, 
                                top_publisher = FALSE){

  if(top_publisher == TRUE){
    
    bar <-
    publishers |> 
      filter(publishers %in% top_publishers) |> 
      inner_join(game_info, join_by(publisher_id)) |>
      inner_join({{some_var}}, join_by({{var_id}})) |> 
      distinct(pick(publisher_id, game_id, {{var_id}}), .keep_all = TRUE) |> 
      mutate({{var_title}} := factor({{var_title}})|> fct_infreq() |> fct_rev(),
             {{var_title}} := fct_lump({{var_title}}, n = 15))
  }else{
    
    bar <-
      publishers |> 
      inner_join(game_info, join_by(publisher_id)) |>
      inner_join({{some_var}}, join_by({{var_id}})) |> 
      distinct(pick(publisher_id, game_id, {{var_id}}), .keep_all = TRUE) |> 
      mutate({{var_title}} := factor({{var_title}})|> fct_infreq() |> fct_rev(),
             {{var_title}} := fct_lump({{var_title}}, n = 15))
    
  } 
  
  bar |> 
  summarise(n = n(), .by = {{var_title}}) |> 
  ggplot(aes({{var_title}}, n)) +
  geom_bar(fill = 'blue4', stat = 'identity') +
  coord_flip() +
  geom_text(aes(label = signif(n)), nudge_y = nudge)
  
}

```

To gain a stronger understanding of the array of series found in the game information data set, we analyze the distribution of game series. @fig-series-distr specifies the top 15 most frequent game series in the data set. As we can see from the column “Other” having 1569 observations there are much smaller video game series attributed in the game series data set. However, Pokémon is the most frequent series, with 52 observations.

```{r}
#| label: fig-series-distr
#| fig-cap: Distribution of series 

get_game_info_distr(some_var = game_series, var_id = series_id, 
                    var_title = series, nudge = 80, 
                    top_publisher = FALSE) +
  labs(x = 'Series',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')

```

Looking a little further, we can identify the distribution of game series for the top publishers. @fig-series-top-publishers shows a fairly similar trend between this graph and @fig-series-distr. With other publishers out of consideration, series such as Call of Duty (published by Activision Blizzard) and Just Dance (published by Ubisoft) climb higher on the rankings. Final Fantasy, a series published by Square Enix game, surprisingly overtakes Pokémon in this distribution. This phenomenon can be attributed to the fact that Nintendo, which is the company receiving credit for the Pokémon series, historically has not always published the series’ games. 

```{r}
#| label: fig-series-top-publishers
#| fig-cap: Distribution of series by top-publishers

get_game_info_distr(some_var = game_series, var_id = series_id, 
                    var_title = series, nudge = 25, 
                    top_publisher = TRUE) +
  labs(x = 'Series',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')

```

We can follow the same structure of analysis for the genres data set. First looking at the frequency of game genres in general, @fig-genres-distr shows that action-adventure and role-playing games are the most common genres of game to create. This observation should not come as a surprise to a researcher, as these two genres are fairly broad compared to genres lower on this distribution. With the assumption that games with no specific genre tend to cluster to these top two genres, we should expect to see a large proportion of games here.

```{r}
#| label: fig-genres-distr
#| fig-cap: Distribution of genres 

get_game_info_distr(some_var = game_genres, var_id = genre_id, 
                    var_title = genres, nudge = 50, 
                    top_publisher = FALSE) +
  labs(x = 'Genres',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')

```

A researcher may be curious about the genre distribution of the top publishers, as this distribution may reveal which genres commonly show great success in the industry. Furthermore, this distribution may reveal which genres these publishers hold a strong share in compared to other publishers. @fig-genres-top-publishers finds that role-playing and action-adventure games have switched for the number 1 and number 2 positions. Sports make a noticeable jump in the frequency rankings. Electronic Arts and Take-Two, known for the Madden and NBA 2K series respectively, contribute to 64 of the 106 games. Nevertheless, the order of genres in this distribution is generally the same when compared with @fig-genres-distr.

```{r}
#| label: fig-genres-top-publishers
#| fig-cap: Distribution of genres by top-publishers

get_game_info_distr(some_var = game_genres, var_id = genre_id, 
                    var_title = genres, nudge = 10, 
                    top_publisher = TRUE) +
  labs(x = 'Genres',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')
```

Finally, a researcher may be interested in understanding how different categories of video games have evolved over the past 10 years. For example, it could be the case that the majority of games that have “simulation” for their genre were published in 2013, overestimating the popularity of the genre from a modern-day perspective. Thus we may want to examine the distribution of a game category based on a specified period. A simple version of this analysis is done through a violin plot distribution of games on @fig-days-since-released-modes, grouped by game modes and whether or not the game was released after 2017. For simplicity, we only focus on a small subset of modes and periods, but increasing this subset would likely find a more complex understanding. If we believe that there was an apparent era of dominance by one mode of video games, we should expect the violin plot densities to vary significantly between the two year-based groups. This graph finds that the distributions of game modes are nearly identical across the year groups, indicating that for this level of complexity, we see no strong preference for game modes between periods.

```{r}
#| label: fig-days-since-released-modes
#| fig-cap: Boxplot distribution of days since a game released, group by game modes

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_info, join_by(publisher_id)) |>
  inner_join(game_modes, join_by(mode_id)) |> 
  distinct(pick(publisher_id, game_id, mode_id), .keep_all = TRUE) |> 
  mutate(modes = factor(modes)|> fct_infreq() |> fct_rev(),
         modes = fct_lump(modes, n = 2),
         days_since = as.numeric(today() - release),
         year = if_else(year('2017-12-31') < year(release), 
                        'Years 2018 - 2023',
                        'Years 2013 - 2017')) |> 
  ggplot(aes(year, days_since, fill = modes)) +
  geom_violin() + 
  labs(x = 'Years',
       y = 'Days Since Game Released',
       fill = 'Modes',
       caption = 'Source: Wikipedia')


##########################
### GAME INFO EDA ENDS ###
##########################

### 
#############################################################################
  
```



### EDA - Esports

We start our analysis by exploring statistical tables of the `earnings`, `tournaments`, and `players` variables within the data set `esports`. These statistics are grouped by top publishers. Through this analysis, we hope to start to build a general understanding of the distribution of these numeric variables from a quantitative perspective. 

```{r}
#| label: esports_sum_table function

################################################################################
  
#########################
### ESPORTS EDA START ###
#########################

esports_sum_table <- function(some_var){

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(esports, join_by(game_id)) |> 
  distinct(pick(game_id, date), .keep_all = TRUE) |> 
  mutate(year = year(date)) |> 
  summarize(mean = round(mean({{some_var}}), 2),
            quantile_25 = quantile({{some_var}}, probs = c(.25)),
            median = median({{some_var}}),
            quantile_75 = quantile({{some_var}}, probs = c(.75)),
            total = sum({{some_var}}),
            .by = publishers,
            n = n()) |> 
  DT::datatable()

}

```

@tbl-sum-table-earning shows a summary table of earnings at esports events. Sorting by mean, descending, Activision Blizzard gives its players the highest earnings, with a total average of 294,170.69 dollars earned per month for playing Activision Blizzard-related esports games. This number is a testament to Activision Blizzard’s collection of popular competitive-based games, including Overwatch, Diablo, and Call of Duty. Similarly, at the second highest mean, Take-Two Games publishes NBA 2K, which has a competitive league of its own. Companies like Nintendo and Sega have little average revenue for players. While Sega’s placing is not surprising due to its lack of competitive games, Nintendo being low on the list is rather interesting; the industry has various competitive games such as the Super Smash Bros. series and Mario Kart series that, in theory, should generate enough revenue to garner higher earnings numbers. 

```{r}
#| label: tbl-sum-table-earning
#| tbl-cap: Summary table of earnings statistics 

esports_sum_table(earnings)

```

@tbl-sum-table-tournaments presents more irony concerning Nintendo’s low average earnings. Again, sorting the table by average monthly tournaments, decreasing, Figure 8 shows that Nintendo has the highest average monthly tournaments. Given the company’s low average earnings, we may expect the average monthly tournaments to have a similar ranking. One plausible reason for this interesting observation is that those who play Nintendo-published games competitively are willing to compete at lower earnings rates. Maybe these individuals play competitively as a hobby, whereas those who play Activision Blizzard or Take-Two games competitively do so on a full-time salary. 

```{r}
#| label: tbl-sum-table-tournaments
#| tbl-cap: Summary table of tournament statistics 

esports_sum_table(tournaments)

```

Finishing the tables, @tbl-sum-table-players presents a statistical summary of players by the top publishers. Concerning means, Activision Blizzard has an average of approximately 94 players competing in esports games a month. Electronic Arts (64) and Ubisoft (58) follow. These rankings can be attributed to the number of players the game being played needs. Activision Blizzard’s games most likely need large teams to play a complete game. While competitive games made by Sega (average of approximately 4 players) likely need one or two players to play competitively.

```{r}
#| label: tbl-sum-table-players
#| tbl-cap: Summary table of players statistics 

esports_sum_table(players)

```


```{r}
#| label: esports_histograms function 

 esports_histograms <- function(some_var = tournaments, binwidth = 1, 
                                xlim = c(0,20), 
                                top = TRUE, filter_less = NA){
  
  if(top == TRUE){ 
    
  histogram <-
    publishers |> 
    filter(publishers %in% top_publishers) |> 
    inner_join(game_info, join_by(publisher_id)) |> 
    inner_join(esports, join_by(game_id)) |> 
    distinct(pick(game_id, date), .keep_all = TRUE) |> 
    mutate(year = year(date))
  }else{
    
  histogram <-
  publishers |> 
    inner_join(game_info, join_by(publisher_id)) |> 
    inner_join(esports, join_by(game_id)) |> 
    distinct(pick(game_id, date), .keep_all = TRUE) |> 
    mutate(year = year(date))
    
  }
   
  if(!is.na(filter_less)){
    
    histogram <-
      histogram |> 
      filter({{some_var}} < filter_less)
      
  }

   histogram |> 
    ggplot(aes({{some_var}})) +
    geom_histogram(fill = 'blue4', color = 'white', binwidth = binwidth, boundary = 0) +
    coord_cartesian(xlim = xlim)
   
 }
  
```

@fig-earnings-distribtion observes the histogram distribution of monthly earnings of all games. Data is binned at every 250 dollars. It is clear to see that the observations are right-skewed; a vast majority of observations fall within monthly earnings of 1,500 dollars or lower, peaking in the first histogram bin. An interesting observation is the apparent increase in the number of earnings in the 10,000 range. There are also similar jumps near the 5,000 range and 15,000 range. This observation can be attributed to games having a specific cut-off for possible competitive earnings. Numbers such as 5,000 and 10,000 are common and plausible numbers for this cut-off.

```{r}
#| label: fig-earnings-distribtion
#| fig-cap: Distribution of earnings 

esports_histograms(some_var = earnings, binwidth = 250, xlim = c(0,15000), 
                                top = FALSE, filter_less = 15250) +
  labs(x = 'Earnings',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

We may theorize that the top publishers in the video game industry may be able to provide higher earnings in esports events. Therefore, we should expect the distribution of earnings of top publishers to be less right-skewed compared to the general histogram distribution. From an initial visual standpoint, @fig-earnings-distribtion-top-publisher shows a similar distribution compared to @fig-earnings-distribtion. This similarity may indicate that there is no correlation between the success of an entire company and the esports earnings for their games. Instead, earnings from esports may be entirely dependent on the individual success of the game. 

```{r}
#| label: fig-earnings-distribtion-top-publisher
#| fig-cap: Distribution of earnings of top publishers

esports_histograms(some_var = earnings, binwidth = 250, xlim = c(0,15000), 
                                top = TRUE, filter_less = 15250) + 
  labs(x = 'Earnings',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

Furthering the analysis concerning earnings, we may want to examine each of the top publisher’s median earnings per year. This information may help us to understand the growth of a company’s esports involvement over the past ten years. To accomplish this inquiry, @fig-median-earning-per-yer-by-top-publisher plots median earnings against years, grouped by the top publishers. Note on the y-axis that 0e+00 is equal to 0, 1e+05 equals 100000, 2e+05 equals 200000, and so on. From 2013 to 2023, Take-Two saw the highest change in median earnings, followed by Electronic Arts. There are multiple groups, such as Activision Blizzard and Konami, who have seen peaks in their median earnings in past years and have since regressed in their median earnings. This observation can be attributed to games losing their popularity over time. If we keep the assumption that the performance and success of a game dictates the earnings a publisher provides for esports events, we can conclude that publishers like Take-Two publish games with growing fan bases, while publishers like Konami have seen the opposite effect in recent years.

```{r}
#| label: fig-median-earning-per-yer-by-top-publisher
#| fig-cap: Median esports earnings per yer by top publishers 

    publishers |> 
  #this code is fairly similar to the previous function
  filter(publishers %in% top_publishers) |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(esports, join_by(game_id)) |> 
  distinct(pick(game_id, date), .keep_all = TRUE) |> 
  mutate(year = year(date)) |> 
  summarize(earnings_mean = mean(earnings),
            earnings_median = median(earnings),
            quantile_25 = quantile(earnings, probs = c(.25)),
            quantile_75 = quantile(earnings, probs = c(.75)),
            total_earnings = sum(earnings),
            #however, we're grouping by publishers and year this time, not just
            # publishers
            .by = c(publishers, year),
            n = n()) |>
  filter(earnings_median != max(earnings_median),
         earnings_mean != 0) |> 
  ggplot(aes(year, earnings_median, color = publishers)) +
  geom_line() +
  geom_point(alpha = .75) +
  scale_x_continuous(breaks = c(2013:2023)) +
  theme(axis.text.x = element_text(angle=45)) +
  labs(x = 'Year',
       y = 'Earning Median',
       color = 'Publishers',
       caption = 'Source: RAN.KIRSH - Kaggle, Yahoo! Finance')
```

Lastly, we can examine a scatter plot of the earnings of tournaments against the adjusted closing value of a top publisher’s stock. The goal of this analysis is to determine whether there is some type of correlation between earnings/tournaments and these stocks. We group each of these scatter plots by top publisher. 

@fig-adjusted-v-earnings shows monthly earnings against daily adjusted closing stocks for each top publisher. The slope of the curves shows no clear trend across all publishers. However, we can theorize that publishers seeing a positive correlation between earnings and stocks would see increases in the value of their companies if they continued to invest in esports revenue for their games. The opposite can be said for publishers who see a negative correlation between the two variables.

```{r}
#| label: fig-adjusted-v-earnings
#| fig-cap: Scatterplot of earnings against adjusted_close values, grouped by top publishers

esports |> 
      inner_join(games, join_by(game_id)) |> 
      inner_join(game_info, join_by(game_id)) |> 
      inner_join(publishers, join_by(publisher_id)) |> 
      inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
      distinct(date, publisher_id, .keep_all = TRUE) |> 
      select(!c(game_id, game, release,genre_id, series_id, mode_id)) |>
      filter(earnings < 50000) |>
      
      ggplot(aes(adjusted, earnings)) +
      geom_point(aes(color = publishers, ), alpha = .3) +
      facet_wrap(vars(publishers)) +
      geom_smooth(method = lm, se = FALSE) +
  labs(x = 'Adjusted',
       y = 'Earnings',
       caption = 'Source: RAN.RIRSH - Kaggle, Yahoo! Finance') +
  guides(color = FALSE) 

```

@fig-adjusted-v-tournaments creates this same graphical representation, replacing earnings for tournaments. The results of this scatter plot show relatively no correlations across all subgroups. There is a concern that publishers such as Sega and Square Enix do not have enough large variations in their adjusted closing stocks for strong analysis. It could be the case that if we had predictive information about these publishers’ stocks, we may observe either a positive or negative correlation between the two variables. Nevertheless, Figure 14 currently implies that increasing the number of tournaments a publisher’s game participates in does not affect the company’s adjusted closing stocks.

```{r}
#| label: fig-adjusted-v-tournaments
#| fig-cap: Scatterplot of tournaments against adjusted_close values, grouped by top publishers
    
    esports |> 
      inner_join(games, join_by(game_id)) |> 
      inner_join(game_info, join_by(game_id)) |> 
      inner_join(publishers, join_by(publisher_id)) |> 
      inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
      distinct(date, publisher_id, .keep_all = TRUE) |> 
      select(!c(game_id, game, release,genre_id, series_id, mode_id)) |>
      
      ggplot(aes(adjusted, tournaments)) +
      geom_point(aes(color = publishers), alpha = .3) +
      facet_wrap(vars(publishers)) +
      geom_smooth(method = lm, se = FALSE) +
  labs(x = 'Adjusted',
       y = 'Tournaments',
       caption = 'Source: RAN.RIRSH - Kaggle, Yahoo! Finance') +
  guides(color = FALSE)

```

### EDA - The Game Awards

The analysis focused on The Game Awards data set starts by characterizing the frequency with which the top publishers win an award at The Game Awards. @fig-winners-top-publishers shows that, from The Game Awards inaugural ceremony in 2014 to its latest event in 2022, Nintendo has won the most awards out of the other top publishers. Similar to the publisher’s leading number of games in `game_info`, Nintendo's leading number of nomination wins is representative of their various critically-acclaimed games and series. Furthermore, the high number of wins demonstrates the publisher’s consistency over the past nine years. 

```{r}
#| label: fig-winners-top-publishers
#| fig-cap: Number of Game Awards wins by top publishers 

################################################################################
  
#############################
### GAME AWARDS EDA START ###
#############################

#top publishers with the most winners
publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_awards, join_by(publisher_id)) |> 
  filter(winner == TRUE) |> 
  mutate(publishers = factor(publishers)|> fct_infreq() |> fct_rev()) |> 
  summarise(n = n(), .by = publishers) |> 
  ggplot(aes(publishers, n)) +
  geom_bar(fill = 'blue4', stat = 'identity') +
  coord_flip() +
  geom_text(aes(label = signif(n)), nudge_y = 1) +
  labs(y = 'Number of Game Awards Wins',
       x = 'Publishers',
       caption = 'Source: Wikipedia')

```

A researcher may be curious about the frequency publisher gets nominated for awards as well. One may theorize that a company could have just as many nominations as Nintendo but is consistently beaten by its competitor. @fig-nominations-top-publishers represents the frequency of the number of nominations a publisher receives from The Game Awards. In this graph, Nintendo is still the leading publisher with 71 nominations. A publisher such as Electronic Arts, which has 45 nominations but only 6 wins, better fits the proposed theory. Nevertheless, the rankings of the publishers across both graphs are similar.


```{r}
#| label: fig-nominations-top-publishers
#| fig-cap: Number of Game Awards nominations by top publishers 

  publishers |> 
    filter(publishers %in% top_publishers) |> 
    inner_join(game_awards, join_by(publisher_id)) |> 
    mutate(publishers = factor(publishers)|> fct_infreq() |> fct_rev()) |> 
    summarise(n = n(), .by = publishers) |> 
    ggplot(aes(publishers, n)) +
    geom_bar(fill = 'blue4', stat = 'identity') +
    coord_flip() +
    geom_text(aes(label = signif(n)), nudge_y = 3) +
  labs(y = 'Number of Game Awards Nominations',
       x = 'Publishers',
       caption = 'Source: Wikipedia')
  
```

After characterizing the top publishers relative to The Game Awards wins and nominations, a researcher may be interested in understanding how these companies compare to other companies at The Game Awards. Specifically, @fig-win-top-publishers-v-other represents the distribution of wins by publisher of each category from The Game Awards. If a company is not one of the top publishers, that group is placed into the “Other” category. From this setup, a researcher may seek to identify a category that the top publishers continuously dominate. The most notable discrepancies come from Best Family Game and Best Multiplayer. Nintendo has historically dominated Best Family Game, capturing 6 of their 20 awards in this category. Considering Nintendo’s focus on creating family-friendly games, it is not surprising that most of their wins come from this category. Best Multiplayer is dominated by Electronic Arts, Nintendo, and Activision Blizzard, with those publishers claiming 6 of the 7 awards in that category. Again, we can attribute this dominance to these companies’ focus on creating high-quality multiplayer games.

```{r}
#| label: fig-win-top-publishers-v-other
#| fig-cap: Number of Game Awards wins by top publishers relative to other publishers

publishers |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(games, join_by(game_id)) |> 
  inner_join(game_awards, join_by(game_id)) |> 
  inner_join(award_category, join_by(category_id)) |> 
  filter(winner == TRUE) |>  
  distinct(pick(game, category_id, date), .keep_all = TRUE) |> 
  select(c(date, game, publishers, category)) |> 
  mutate(category = factor(category)|> fct_infreq() |> fct_rev(),
         top_publishers = factor(if_else(publishers %in% top_publishers,
                            publishers,
                            'other'))) |> 
  summarise(n = n(), .by = c(category, top_publishers)) |> 
  
  mutate(top_publishers = fct_reorder(top_publishers, n)) |> 
  ggplot(aes(category, n, fill = top_publishers)) +
  scale_fill_hue(l=40, c=30) +
  geom_bar(stat = 'identity', color = 'white') +
  scale_y_continuous(breaks = c(1:9)) +
  coord_flip() +
  labs(y = 'Game Awards Wins',
       x = 'Category',
       caption = 'Source: Wikipedia',
       fill = 'Top Category')

```

### GAME REVIEWS

```{r}
#| label: fig-rating-distr
#| fig-cap: Distribution of game ratings by reviewers

################################################################################

########################
### GAME REVIEWS EDA ###
########################

#distribution of game review scores
game_reviews |> 
  ggplot(aes(rating)) +
  geom_histogram(fill = 'blue4', 
                 color = 'white',
                 binwidth = 5, 
                 boundary = 100) +
  coord_cartesian(xlim = c(10, 100)) +
  scale_x_continuous(breaks = c(10,20,30,40,50,60,70,80,90,100)) +
  labs(x = 'Rating',
       y = '',
       caption = 'Source: OpenCritic')
  

```

```{r}
#| label: fig-rating-sample-summary
#| fig-cap: Summary of the rating distribution

game_reviews |> 
  filter(!is.na(rating)) |> 
  summarise(
    rating_mean = mean(rating),
    rating_median = median(rating),
    rating_sd = sd(rating),
    rating_iqr = IQR(rating)
  ) |> 
  knitr::kable() 

```

```{r}
#| label: fig-rating-distr-top-publisher
#| fig-cap : Distribution of top-publisher game ratings by reviewers 

 publishers |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(games, join_by(game_id)) |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  distinct(pick(reviewer_id, game_id), .keep_all = TRUE) |>
  filter(publishers %in% top_publishers) |> 
  
  ggplot(aes(rating)) +
  geom_histogram(fill = 'blue4', 
                 color = 'white', 
                 binwidth = 5, 
                 boundary = 100) +
  coord_cartesian(xlim = c(0, 100)) +
  scale_x_continuous(breaks = c(10,20,30,40,50,60,70,80,90,100)) +
  labs(x = 'Rating',
       y = '',
       caption = 'Source: OpenCritic')
```

```{r}
#| label: fig-rating-sample-summary-for-top-publishers
#| fig-cap : Summary of the rating distribution for games published by top publishers

publishers |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(games, join_by(game_id)) |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  distinct(pick(reviewer_id, game_id), .keep_all = TRUE) |> 
  filter(publishers %in% top_publishers, !is.na(rating)) |> 
  summarise(
    rating_mean = mean(rating),
    rating_median = median(rating),
    rating_sd = sd(rating),
    rating_iqr = IQR(rating)
  ) |> 
  knitr::kable()
```

```{r}
#| label: ratings-v-adjusted
#| fig-cap : Scatterplot of ratings against the adjusted close value of stocks

games |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  inner_join(game_info, join_by(game_id)) |> 
  inner_join(publishers, join_by(publisher_id)) |> 
  inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
  
  distinct(pick(date, publisher_id), .keep_all = TRUE) |> 
  filter(publishers %in% top_publishers) |> 
  ggplot(aes(rating, adjusted)) +
  geom_point(alpha = .25) +
  geom_smooth(method = lm, se = FALSE) +
  labs(x = 'Rating',
       y = 'Adjusted',
       caption = 'Sources: OpenCritic, Yahoo! Finance')
```

```{r}
#| label: ratings-v-adjusted-groupby-top-publishers
#| fig-cap: Scatterplot of ratings against the adjusted close value of stocks, grouped by top publishers

games |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  inner_join(game_info, join_by(game_id)) |> 
  inner_join(publishers, join_by(publisher_id)) |> 
  inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
  
  distinct(pick(date, publisher_id), .keep_all = TRUE) |> 
  filter(publishers %in% top_publishers) |> 
  ggplot(aes(rating, adjusted)) +
  geom_point(alpha = .25) +
  geom_smooth(method = lm, se = FALSE) +
  facet_wrap(vars(publishers)) +
   labs(x = 'Rating',
       y = 'Adjusted',
       caption = 'Sources: OpenCritic, Yahoo! Finance')

```

APPENDIX - EXTRA EXPLORATIONS

esports

```{r}
#| label: fig-tournament-distribution
#| fig-cap: Distribution of tournaments 

esports_histograms(some_var = tournaments, binwidth = 1, xlim = c(0,20), 
                                top = FALSE, filter_less = NA) + 
  labs(x = 'Tournaments',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

```{r}
#| label: fig-tournament-distribtion-top-publisher
#| fig-cap: Distribution of tournaments of top publishers

esports_histograms(some_var = tournaments, binwidth = 1, xlim = c(0,20), 
                                top = TRUE, filter_less = NA) + 
  labs(x = 'Tournaments',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

```{r}
#| label: fig-players-distribtion
#| fig-cap: Distribution of players

esports_histograms(some_var = players, binwidth = 5, xlim = c(0,200), 
                                top = FALSE, filter_less = NA) + 
  labs(x = 'Players',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle') 
```

```{r}
#| label: fig-players-distribtion-top-publisher
#| fig-cap: Distribution of players of top publishers

esports_histograms(some_var = players, binwidth = 5, xlim = c(0,200), 
                                top = TRUE, filter_less = NA) + 
  labs(x = 'Players',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

game awards

```{r}
#| label: fig-winner-top-publishers-table
#| fig-cap: Table of Game Awards wins by top publishers 

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_awards, join_by(publisher_id)) |> 
  inner_join(award_category, join_by(category_id)) |>
  inner_join(games, join_by(game_id)) |> 
  filter(winner == TRUE) |> 
  select(c(date, category, publishers, game)) |> 
  DT::datatable()

```
