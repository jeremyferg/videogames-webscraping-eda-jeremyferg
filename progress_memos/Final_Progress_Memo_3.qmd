---
title: "Progress Memo 3"
subtitle: |
  | Final Project 
  | Data Science 1 with R (STAT 301-1)
author: "Jeremy Ferguson"
date: today

format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    
execute:
  echo: true
  warning: false

from: markdown+emoji 
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| label: packages
#| echo: false

###########################
### NECESSARY LIBRARIES ###
###########################

library(tidyverse)

##########################
### LOADING IN DB DATA ###
##########################

game_awards <- read_csv('data/games_database/game_awards.csv')
award_category <- read_csv('data/games_database/award_category.csv')

esports <- read_csv('data/games_database/esports.csv')

game_info <- read_csv('data/games_database/game_info.csv')
games <- read_csv('data/games_database/games.csv')
game_genres <- read_csv('data/games_database/game_genres.csv')
game_modes <- read_csv('data/games_database/game_modes.csv')
game_series <- read_csv('data/games_database/game_series.csv')

publishers <- read_csv('data/games_database/publishers.csv')
publisher_stocks <- read_csv('data/games_database/publisher_stocks.csv')

game_reviews <- read_csv('data/games_database/game_reviews.csv')
game_review_companies <- read_csv('data/games_database/game_review_companies.csv')
game_reviewers <- read_csv('data/games_database/game_reviewers.csv')


###list of publishers that will be key for analysis
top_publishers <- c('nintendo', 'electronic arts', 'activision blizzard',
                    'square enix', 'sega', 'konami', 'ubisoft', 'take-two',
                    'bandai namco', 'capcom')

```

### GAME INFO


```{r}
#| label: fig-games-by-publisher
#| fig-cap: Distribution of games by top-publishers

################################################################################

#############################
### GAME INFO EDA  BEGINS ###
#############################

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  distinct(pick(publisher_id, game_id), .keep_all = TRUE) |> 
  mutate(publishers = factor(publishers)|> fct_infreq() |> fct_rev()) |> 
  summarise(n = n(), .by = publishers) |> 
  ggplot(aes(publishers, n)) +
  geom_bar(fill = 'blue4', stat = 'identity') +
  coord_flip() +
  geom_text(aes(label = signif(n)), nudge_y = 10) +
  labs(y = 'Number of Games',
       x = 'Publishers',
       caption = 'Source: Wikipedia')

```


```{r}
#| label: get_game_info_distr

get_game_info_distr <- function(some_var = game_series, var_id = series_id, 
                                var_title = series, nudge = 80, 
                                top_publisher = FALSE){

  if(top_publisher == TRUE){
    
    bar <-
    publishers |> 
      filter(publishers %in% top_publishers) |> 
      inner_join(game_info, join_by(publisher_id)) |>
      inner_join({{some_var}}, join_by({{var_id}})) |> 
      distinct(pick(publisher_id, game_id, {{var_id}}), .keep_all = TRUE) |> 
      mutate({{var_title}} := factor({{var_title}})|> fct_infreq() |> fct_rev(),
             {{var_title}} := fct_lump({{var_title}}, n = 15))
  }else{
    
    bar <-
      publishers |> 
      inner_join(game_info, join_by(publisher_id)) |>
      inner_join({{some_var}}, join_by({{var_id}})) |> 
      distinct(pick(publisher_id, game_id, {{var_id}}), .keep_all = TRUE) |> 
      mutate({{var_title}} := factor({{var_title}})|> fct_infreq() |> fct_rev(),
             {{var_title}} := fct_lump({{var_title}}, n = 15))
    
  } 
  
  bar |> 
  summarise(n = n(), .by = {{var_title}}) |> 
  ggplot(aes({{var_title}}, n)) +
  geom_bar(fill = 'blue4', stat = 'identity') +
  coord_flip() +
  geom_text(aes(label = signif(n)), nudge_y = nudge)
  
}

```

```{r}
#| label: fig-series-distr
#| fig-cap: Distribution of series 

get_game_info_distr(some_var = game_series, var_id = series_id, 
                    var_title = series, nudge = 80, 
                    top_publisher = FALSE) +
  labs(x = 'Series',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')

```


```{r}
#| label: fig-series-top-publishers
#| fig-cap: Distribution of series by top-publishers

get_game_info_distr(some_var = game_series, var_id = series_id, 
                    var_title = series, nudge = 25, 
                    top_publisher = TRUE) +
  labs(x = 'Series',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')

```

```{r}
#| label: fig-genres-distr
#| fig-cap: Distribution of genres 

get_game_info_distr(some_var = game_genres, var_id = genre_id, 
                    var_title = genres, nudge = 50, 
                    top_publisher = FALSE) +
  labs(x = 'Genres',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')

```

```{r}
#| label: fig-genres-top-publishers
#| fig-cap: Distribution of genres by top-publishers

get_game_info_distr(some_var = game_genres, var_id = genre_id, 
                    var_title = genres, nudge = 10, 
                    top_publisher = TRUE) +
  labs(x = 'Genres',
       y = 'Number of Games',
       caption = 'Source: Wikipedia')
```


```{r}
#| label: fig-days-since-released-modes
#| fig-cap: Boxplot distribution of days since a game released, group by game modes

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_info, join_by(publisher_id)) |>
  inner_join(game_modes, join_by(mode_id)) |> 
  distinct(pick(publisher_id, game_id, mode_id), .keep_all = TRUE) |> 
  mutate(modes = factor(modes)|> fct_infreq() |> fct_rev(),
         modes = fct_lump(modes, n = 2),
         days_since = as.numeric(today() - release),
         year = if_else(year('2017-12-31') < year(release), 
                        'Years 2018 - 2023',
                        'Years 2013 - 2017')) |> 
  ggplot(aes(year, days_since, fill = modes)) +
  geom_violin() + 
  labs(x = 'Years',
       y = 'Days Since Game Released',
       fill = 'Modes',
       caption = 'Source: Wikipedia')


##########################
### GAME INFO EDA ENDS ###
##########################

### 
#############################################################################
  
```

The `echo: false` option disables the printing of code (only output is displayed).

### ESPORT

```{r}
#| label: esports_sum_table function

################################################################################
  
#########################
### ESPORTS EDA START ###
#########################

esports_sum_table <- function(some_var){

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(esports, join_by(game_id)) |> 
  distinct(pick(game_id, date), .keep_all = TRUE) |> 
  mutate(year = year(date)) |> 
  summarize(mean = round(mean({{some_var}}), 2),
            quantile_25 = quantile({{some_var}}, probs = c(.25)),
            median = median({{some_var}}),
            quantile_75 = quantile({{some_var}}, probs = c(.75)),
            total = sum({{some_var}}),
            .by = publishers,
            n = n()) |> 
  DT::datatable()

}

```


```{r}
#| label: fig-sum-table-earning
#| fig-cap: Summary table of earnings statistics 

esports_sum_table(earnings)

```

```{r}
#| label: fig-sum-table-tournaments
#| fig-cap: Summary table of tournament statistics 

esports_sum_table(tournaments)

```

```{r}
#| label: fig-sum-table-players
#| fig-cap: Summary table of players statistics 

esports_sum_table(players)

```

```{r}
#| label: fig-median-earning-per-yer-by-top-publisher
#| fig-cap: Median esports earnings per yer by top publishers 

    publishers |> 
    filter(publishers %in% top_publishers) |> 
    inner_join(game_info, join_by(publisher_id)) |> 
    inner_join(esports, join_by(game_id)) |> 
    distinct(pick(game_id, date), .keep_all = TRUE) |> 
    mutate(year = year(date)) |> 
    summarize(earnings_mean = mean(earnings),
              earnings_median = median(earnings),
              quantile_25 = quantile(earnings, probs = c(.25)),
              quantile_75 = quantile(earnings, probs = c(.75)),
              total_earnings = sum(earnings),
              .by = c(publishers, year),
              n = n()) |>
    filter(earnings_median != max(earnings_median),
           earnings_mean != 0) |> 
    ggplot(aes(year, earnings_median)) +
    geom_vline(xintercept = 2013:2023) +
    geom_point(aes(color = publishers), alpha = .75) +
    coord_flip() +
    scale_x_continuous(breaks = c(2013:2023)) +
    labs(x = 'Year',
         y = 'Earning Median',
         color = 'Publishers',
         caption = 'Source: RAN.KIRSH - Kaggle')
```


```{r}
#| label: esports_histograms function 

 esports_histograms <- function(some_var = tournaments, binwidth = 1, 
                                xlim = c(0,20), 
                                top = TRUE, filter_less = NA){
  
  if(top == TRUE){ 
    
  histogram <-
    publishers |> 
    filter(publishers %in% top_publishers) |> 
    inner_join(game_info, join_by(publisher_id)) |> 
    inner_join(esports, join_by(game_id)) |> 
    distinct(pick(game_id, date), .keep_all = TRUE) |> 
    mutate(year = year(date))
  }else{
    
  histogram <-
  publishers |> 
    inner_join(game_info, join_by(publisher_id)) |> 
    inner_join(esports, join_by(game_id)) |> 
    distinct(pick(game_id, date), .keep_all = TRUE) |> 
    mutate(year = year(date))
    
  }
   
  if(!is.na(filter_less)){
    
    histogram <-
      histogram |> 
      filter({{some_var}} < filter_less)
      
  }

   histogram |> 
    ggplot(aes({{some_var}})) +
    geom_histogram(fill = 'blue4', color = 'white', binwidth = binwidth, boundary = 0) +
    coord_cartesian(xlim = xlim)
   
 }
  
```

```{r}
#| label: fig-tournament-distribution
#| fig-cap: Distribution of tournaments 

esports_histograms(some_var = tournaments, binwidth = 1, xlim = c(0,20), 
                                top = FALSE, filter_less = NA) + 
  labs(x = 'Tournaments',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

```{r}
#| label: fig-tournament-distribtion-top-publisher
#| fig-cap: Distribution of tournaments of top publishers

esports_histograms(some_var = tournaments, binwidth = 1, xlim = c(0,20), 
                                top = TRUE, filter_less = NA) + 
  labs(x = 'Tournaments',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

```{r}
#| label: fig-players-distribtion
#| fig-cap: Distribution of players

esports_histograms(some_var = players, binwidth = 5, xlim = c(0,200), 
                                top = FALSE, filter_less = NA) + 
  labs(x = 'Players',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle') 
```

```{r}
#| label: fig-players-distribtion-top-publisher
#| fig-cap: Distribution of players of top publishers

esports_histograms(some_var = players, binwidth = 5, xlim = c(0,200), 
                                top = TRUE, filter_less = NA) + 
  labs(x = 'Players',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

```{r}
#| label: fig-earnings-distribtion
#| fig-cap: Distribution of earnings 

esports_histograms(some_var = earnings, binwidth = 250, xlim = c(0,15000), 
                                top = FALSE, filter_less = 15250) +
  labs(x = 'Earnings',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```

```{r}
#| label: fig-earnings-distribtion-top-publisher
#| fig-cap: Distribution of earnings of top publishers

esports_histograms(some_var = earnings, binwidth = 250, xlim = c(0,15000), 
                                top = TRUE, filter_less = 15250) + 
  labs(x = 'Earnings',
       y = '',
       caption = 'Source: RAN.KIRSH - Kaggle')
```


```{r}
#| label: fig-tournaments-v-players
#| fig-cap: Scatterplot of tournaments against players, grouped by year

 esports |> 
      mutate(date = factor(year(date))) |> 
      ggplot(aes(players, tournaments)) +
      geom_point(alpha = .25) +
      geom_smooth(se = FALSE) + 
      facet_wrap(vars(date)) +
  labs(x = 'Players',
       y = 'Tournaments',
       caption = 'Source: RAN.RIRSH - Kaggle')

```


```{r}
#| label: fig-adjusted-v-earnings
#| fig-cap: Scatterplot of earnings against adjusted_close values, grouped by top publishers

esports |> 
      inner_join(games, join_by(game_id)) |> 
      inner_join(game_info, join_by(game_id)) |> 
      inner_join(publishers, join_by(publisher_id)) |> 
      inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
      distinct(date, publisher_id, .keep_all = TRUE) |> 
      select(!c(game_id, game, release,genre_id, series_id, mode_id)) |>
      filter(earnings < 50000) |>
      
      ggplot(aes(adjusted, earnings)) +
      geom_point(aes(color = publishers, ), alpha = .3) +
      facet_wrap(vars(publishers)) +
      geom_smooth(method = lm, se = FALSE) +
  labs(x = 'Adjusted',
       y = 'Earnings',
       caption = 'Source: RAN.RIRSH - Kaggle') +
  guides(color = FALSE)

```



```{r}
#| label: fig-adjusted-v-tournaments
#| fig-cap: Scatterplot of tournaments against adjusted_close values, grouped by top publishers
    
    esports |> 
      inner_join(games, join_by(game_id)) |> 
      inner_join(game_info, join_by(game_id)) |> 
      inner_join(publishers, join_by(publisher_id)) |> 
      inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
      distinct(date, publisher_id, .keep_all = TRUE) |> 
      select(!c(game_id, game, release,genre_id, series_id, mode_id)) |>
      
      ggplot(aes(adjusted, tournaments)) +
      geom_point(aes(color = publishers), alpha = .3) +
      facet_wrap(vars(publishers)) +
      geom_smooth(method = lm, se = FALSE) +
  labs(x = 'Adjusted',
       y = 'Tournaments',
       caption = 'Source: RAN.RIRSH - Kaggle, Yahoo! Finance') +
  guides(color = FALSE)

```

### GAME AWARDS

```{r}
#| label: fig-winners-top-publishers
#| fig-cap: Number of Game Awards wins by top publishers 

################################################################################
  
#############################
### GAME AWARDS EDA START ###
#############################

#top publishers with the most winners
publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_awards, join_by(publisher_id)) |> 
  filter(winner == TRUE) |> 
  mutate(publishers = factor(publishers)|> fct_infreq() |> fct_rev()) |> 
  summarise(n = n(), .by = publishers) |> 
  ggplot(aes(publishers, n)) +
  geom_bar(fill = 'blue4', stat = 'identity') +
  coord_flip() +
  geom_text(aes(label = signif(n)), nudge_y = 1) +
  labs(x = 'Number of Game Awards Wins',
       y = 'Publishers',
       caption = 'Source: Wikipedia')

```

```{r}
#| label: fig-winner-top-publishers-table
#| fig-cap: Table of Game Awards wins by top publishers 

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_awards, join_by(publisher_id)) |> 
  inner_join(award_category, join_by(category_id)) |>
  inner_join(games, join_by(game_id)) |> 
  filter(winner == TRUE) |> 
  select(c(date, category, publishers, game)) |> 
  DT::datatable()

```


```{r}
#| label: fig-nominations-top-publishers
#| fig-cap: Number of Game Awards nominations by top publishers 

  publishers |> 
    filter(publishers %in% top_publishers) |> 
    inner_join(game_awards, join_by(publisher_id)) |> 
    mutate(publishers = factor(publishers)|> fct_infreq() |> fct_rev()) |> 
    summarise(n = n(), .by = publishers) |> 
    ggplot(aes(publishers, n)) +
    geom_bar(fill = 'blue4', stat = 'identity') +
    coord_flip() +
    geom_text(aes(label = signif(n)), nudge_y = 3) +
  labs(x = 'Number of Game Awards Nominations',
       y = 'Publishers',
       caption = 'Source: Wikipedia')
  
```

```{r}
#| label: fig-win-top-publishers-v-other
#| fig-cap: Number of Game Awards winsby top publishers relative to other publishers

publishers |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(games, join_by(game_id)) |> 
  inner_join(game_awards, join_by(game_id)) |> 
  inner_join(award_category, join_by(category_id)) |> 
  filter(winner == TRUE) |>  
  distinct(pick(game, category_id, date), .keep_all = TRUE) |> 
  select(c(date, game, publishers, category)) |> 
  mutate(category = factor(category)|> fct_infreq() |> fct_rev(),
         top_publishers = factor(if_else(publishers %in% top_publishers,
                            publishers,
                            'other'))) |> 
  summarise(n = n(), .by = c(category, top_publishers)) |> 
  
  mutate(top_publishers = fct_reorder(top_publishers, n)) |> 
  ggplot(aes(category, n, fill = top_publishers)) +
  scale_fill_hue(l=40, c=30) +
  geom_bar(stat = 'identity', color = 'white') +
  scale_y_continuous(breaks = c(1:9)) +
  coord_flip() +
  labs(x = 'Game Awards Wins',
       y = 'Category',
       caption = 'Source: Wikipedia',
       fill = 'Top Category')

```


```{r}
#| label: fig-adjusted-nominations-corr
#| fig-cap: Correlation of Game Awards nominations and correlations based on adjusted close stock value

publishers |> 
  filter(publishers %in% top_publishers) |> 
  inner_join(game_awards, join_by(publisher_id)) |> 
  inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
  summarise(
    mean_adjust = round(mean(adjusted), 2),
    .by = publishers, 
    nominations = n()) |> 
  mutate(correlation = cor(mean_adjust, nominations)) |> 
  DT::datatable()



################################################################################
```

### GAME REVIEWS

```{r}
#| label: fig-rating-distr
#| fig-cap: Distribution of game ratings by reviewers

################################################################################

########################
### GAME REVIEWS EDA ###
########################

#distribution of game review scores
game_reviews |> 
  ggplot(aes(rating)) +
  geom_histogram(fill = 'blue4', 
                 color = 'white',
                 binwidth = 5, 
                 boundary = 100) +
  coord_cartesian(xlim = c(10, 100)) +
  scale_x_continuous(breaks = c(10,20,30,40,50,60,70,80,90,100)) +
  labs(x = 'Rating',
       y = '',
       caption = 'Source: OpenCritic')
  

```

```{r}
#| label: fig-rating-sample-summary
#| fig-cap: Summary of the rating distribution

game_reviews |> 
  filter(!is.na(rating)) |> 
  summarise(
    rating_mean = mean(rating),
    rating_median = median(rating),
    rating_sd = sd(rating),
    rating_iqr = IQR(rating)
  ) |> 
  knitr::kable() 
```

```{r}
#| label: fig-rating-distr-top-publisher
#| fig-cap: Distribution of top-publisher game ratings by reviewers 

 publishers |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(games, join_by(game_id)) |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  distinct(pick(reviewer_id, game_id), .keep_all = TRUE) |>
  filter(publishers %in% top_publishers) |> 
  
  ggplot(aes(rating)) +
  geom_histogram(fill = 'blue4', 
                 color = 'white', 
                 binwidth = 5, 
                 boundary = 100) +
  coord_cartesian(xlim = c(0, 100)) +
  scale_x_continuous(breaks = c(10,20,30,40,50,60,70,80,90,100)) +
  labs(x = 'Rating',
       y = '',
       caption = 'Source: OpenCritic')
```

```{r}
#| label: fig-rating-sample-summary-for-top-publishers
#| fig-cap: Summary of the rating distribution for games published by top publishers

publishers |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(games, join_by(game_id)) |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  distinct(pick(reviewer_id, game_id), .keep_all = TRUE) |> 
  filter(publishers %in% top_publishers, !is.na(rating)) |> 
  summarise(
    rating_mean = mean(rating),
    rating_median = median(rating),
    rating_sd = sd(rating),
    rating_iqr = IQR(rating)
  ) |> 
  knitr::kable()
```


```{r}
#| label: game-review-company-reviews-group-by-publisher
#| fig-cap: Number of reviews the game review companies with the most reviews have based on how many they have written about the top publishers

publishers |> 
  inner_join(game_info, join_by(publisher_id)) |> 
  inner_join(games, join_by(game_id)) |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  inner_join(game_reviewers, join_by(reviewer_id)) |> 
  inner_join(game_review_companies, join_by(review_company_id)) |> 
  
  distinct(pick(reviewer_id, game_id), .keep_all = TRUE) |> 
  mutate(review_company = fct_lump(factor(review_company), 10)) |> 
  filter(publishers %in% top_publishers, review_company != 'Other') |> 
  
  ggplot(aes(publishers, fill = review_company)) +
  scale_fill_hue(l=40, c=30) +
  geom_bar(color = 'white') +
  coord_flip() +
  labs(x = '',
       y = 'Publishers',
       fill = 'Review Company',
       caption = 'Source: OpenCritic')

```


```{r}
#| label: ratings-v-adjusted
#| fig-cap: Scatterplot of ratings against the adjusted close value of stocks

games |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  inner_join(game_info, join_by(game_id)) |> 
  inner_join(publishers, join_by(publisher_id)) |> 
  inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
  
  distinct(pick(date, publisher_id), .keep_all = TRUE) |> 
  filter(publishers %in% top_publishers) |> 
  ggplot(aes(rating, adjusted)) +
  geom_point(alpha = .25) +
  geom_smooth(method = lm, se = FALSE) +
  labs(x = 'Rating',
       y = 'Adjusted',
       caption = 'Sources: OpenCritic, Yahoo! Financne')
```


```{r}
#| label: ratings-v-adjusted-groupby-top-publishers
#| fig-cap: Scatterplot of ratings against the adjusted close value of stocks, grouped by top publishers

games |> 
  inner_join(game_reviews, join_by(game_id)) |> 
  inner_join(game_info, join_by(game_id)) |> 
  inner_join(publishers, join_by(publisher_id)) |> 
  inner_join(publisher_stocks, join_by(publisher_id, date)) |> 
  
  distinct(pick(date, publisher_id), .keep_all = TRUE) |> 
  filter(publishers %in% top_publishers) |> 
  ggplot(aes(rating, adjusted)) +
  geom_point(alpha = .25) +
  geom_smooth(method = lm, se = FALSE) +
  facet_wrap(vars(publishers)) +
   labs(x = 'Rating',
       y = 'Adjusted',
       caption = 'Sources: OpenCritic, Yahoo! Financne')

```

